<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNStore</name>
    </assembly>
    <members>
        <member name="F:RGN.Modules.Store.LootBox.id">
            <summary>
            Unique id of the store offer
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.name">
            <summary>
            Store offer name
            Is used also to store localization key for the name
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.appId">
            <summary>
            Application id where this item is used
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.totalQuantity">
            <summary>
            Total amount of lootBox
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.purchasedQuantity">
            <summary>
            Count lootBoxes was purchased
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.availableQuantity">
            <summary>
            Count lootBoxes left can be open
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.createdAt">
            <summary>
            Date and time when the store offer was created
            In milliseconds since midnight, January 1, 1970 UTC.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.updatedAt">
            <summary>
            Date and time when the store offer data was last time updated
            In milliseconds since midnight, January 1, 1970 UTC.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.createdBy">
            <summary>
            User Id who created the store offer
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.updatedBy">
            <summary>
            User Id who last time updated the store offer
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.LootBox.prices">
            <summary>
            Price information for the lootBox
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.id">
            <summary>
            Unique id of the store offer
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.name">
            <summary>
            Store offer name
            Is used also to store localization key for the name
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.description">
            <summary>
            Store offer description
            Is used also to store localization key for the name
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.appIds">
            <summary>
            List of application ids where this item is used
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.tags">
            <summary>
            List of tags to filter the offers
            You can place multiple store offers into one category tag
            For example in a shooter game: "guns", "rifles"
            Or you can also have one store offer for every category
            with multiple virtual items
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.imageUrl">
            <summary>
            Store offer image url
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.createdAt">
            <summary>
            Date and time when the store offer was created
            In milliseconds since midnight, January 1, 1970 UTC.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.updatedAt">
            <summary>
            Date and time when the store offer data was last time updated
            In milliseconds since midnight, January 1, 1970 UTC.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.createdBy">
            <summary>
            User Id who created the store offer
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.updatedBy">
            <summary>
            User Id who last time updated the store offer
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.time">
            <summary>
            The time when the store offer is available
            This is used for limited time offers (LTO)
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.properties">
            <summary>
            List of store offer custom json. It is used to store
            game specific json in json format.
            For example: you can attach some json like
            "additiona_description", "in_app_products" to this offer
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.itemIds">
            <summary>
            Virtual items ids list
            It contains the virtual items available to sell
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.StoreOffer.prices">
            <summary>
            Price information for the store offer virtual items
            It is very powerful: you can sell the same virtual item for different
            currencies and prices in the same store offer.
            You can also combine two and more {currency, price} to sell one item
            by using the group field. To "group" currencies and prices together.
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.StoreOffer.GetVirtualItems">
            <summary>
            Gets the list of associated <see cref="T:RGN.Modules.VirtualItems.VirtualItem"/> objects for this store offer.
            </summary>
            <remarks>
            This property is populated only when the 
            <see cref="M:RGN.Modules.Store.StoreModule.GetWithVirtualItemsDataForCurrentAppAsync(System.Int32,System.String,System.Boolean)"/> or
            <see cref="M:RGN.Modules.Store.StoreModule.GetWithVirtualItemsDataByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int32,System.String,System.Boolean)"/>
            methods are used. In all other cases, this method will return null.
            </remarks>
            <returns>A list of <see cref="T:RGN.Modules.VirtualItems.VirtualItem"/> objects associated with this store offer, or null if not available.</returns>
        </member>
        <member name="T:RGN.Modules.Store.TimeInfo">
            <summary>
            Represents the time information related to an offer in the store.
            This information can be used for time-limited offers.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.hasStart">
            <summary>
            Indicates whether a start time is specified.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.start">
            <summary>
            The start time. This field is relevant only if <see cref="F:RGN.Modules.Store.TimeInfo.hasStart"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.hasEnd">
            <summary>
            Indicates whether an end time is specified.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.end">
            <summary>
            The end time. This field is relevant only if <see cref="F:RGN.Modules.Store.TimeInfo.hasEnd"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.hasInterval">
            <summary>
            Indicates whether an interval is specified.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.intervalDuration">
            <summary>
            The interval duration. This field is relevant only if <see cref="F:RGN.Modules.Store.TimeInfo.hasInterval"/> is true.
            </summary>
        </member>
        <member name="F:RGN.Modules.Store.TimeInfo.intervalDelay">
            <summary>
            The interval delay. This field is relevant only if <see cref="F:RGN.Modules.Store.TimeInfo.hasInterval"/> is true.
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.#ctor">
            <summary>
            Default parameterless ctor
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.#ctor(System.Boolean,System.Int64,System.Boolean,System.Int64,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Constructs TimeInfo
            </summary>
            <param name="hasStart"></param>
            <param name="start"></param>
            <param name="hasEnd"></param>
            <param name="end"></param>
            <param name="hasInterval"></param>
            <param name="intervalDuration"></param>
            <param name="intervalDelay"></param>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.ToString">
            <summary>
            Converts the object's properties to strings representation
            </summary>
            <returns>A string that represents the object's properties</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.Equals(RGN.Modules.Store.TimeInfo)">
            <summary>
            Implements standart Equals operation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.Equals(System.Object)">
            <summary>
            Implements standart Equals operation
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.GetHashCode">
            <summary>
            Returns hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreatePermanent">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object that represents a permanent time, with no specific start, end or interval.
            </summary>
            <returns>A new <see cref="T:RGN.Modules.Store.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreateWithStartTime(System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object with a specified start time.
            </summary>
            <param name="start">The start time.</param>
            <returns>A new <see cref="T:RGN.Modules.Store.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreateWithEndTime(System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object with a specified end time.
            </summary>
            <param name="end">The end time.</param>
            <returns>A new <see cref="T:RGN.Modules.Store.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreateWithStartAndEndTime(System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object with specified start and end times.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <returns>A new <see cref="T:RGN.Modules.Store.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreateWithStartTimeAndInterval(System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object with a specified start time and interval.
            </summary>
            <param name="start">The start time.</param>
            <param name="intervalDuration">The interval duration.</param>
            <param name="intervalDelay">The interval delay.</param>
            <returns>A new <see cref="T:RGN.Modules.Store.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreateWithEndTimeAndInterval(System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object with a specified end time and interval.
            </summary>
            <param name="end">The end time.</param>
            <param name="intervalDuration">The interval duration.</param>
            <param name="intervalDelay">The interval delay.</param>
            <returns>A new <see cref="T:RGN.Modules.Store.TimeInfo"/> instance.</returns>
        </member>
        <member name="M:RGN.Modules.Store.TimeInfo.CreateWithStartEndTimeAndInterval(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a <see cref="T:RGN.Modules.Store.TimeInfo"/> object with specified start time, end time, and interval.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <param name="intervalDuration">The interval duration.</param>
            <param name="intervalDelay">The interval delay.</param>
        </member>
        <member name="T:RGN.Modules.Store.StoreModule">
            <summary>
            Represents a module within the Ready Games Network (RGN) specifically designed to interact with the Store functionality.
            It provides a collection of methods to manipulate and retrieve data related to Store Offers.
            </summary>
        </member>
        <member name="T:RGN.Modules.Store.StoreModule.Admin">
            <summary>
            Handle critical operations on Store data
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Admin.SetRGNCore(RGN.IRGNRolesCore)">
            <summary>
            Sets the Ready Games Network (RGN) core reference.
            </summary>
            <param name="rgnCore">The RGN core to be set.</param>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Admin.Init">
            <summary>
            Initializes the VirtualItemsModule.
            This method is currently empty and can be filled with initial setup logic if needed in the future.
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Admin.Dispose">
            <summary>
            Releases all resources used by the VirtualItemsModule.
            This method is currently empty and can be filled with cleanup logic if needed in the future.
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Admin.CreateLootBoxAsync(System.String,System.Collections.Generic.List{RGN.Modules.VirtualItems.PriceInfo})">
            <summary>
            Asynchronously creates lootbox document. Tries to find virtual items by lootBoxName_appId to add to the loot box.
            </summary>
            <param name="lootBoxName">The identifier of new lootbox. At the backend we try to find virual items
            with a tag [lootBoxName_appId]. If no items found, this method will throw an exception</param>
            <param name="prices">The prices parameter. How much it costs to open the loot box. Optional</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided lootBoxId is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result contains the new loot box id.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Admin.DeleteLootBoxAsync(System.String)">
            <summary>
            Asynchronously deletes lootbox document.
            </summary>
            <param name="lootBoxId">The id of the loot box to delete</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided lootBoxId is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result contains the deleted loot box id.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Admin.DeleteStoreOfferAsync(System.String)">
            <summary>
            Asynchronously deletes a specific store offer from the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetRGNCore(RGN.IRGNRolesCore)">
            <summary>
            Sets the Ready Games Network (RGN) core reference.
            </summary>
            <param name="rgnCore">The RGN core to be set.</param>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Init">
            <summary>
            Initializes the StoreModule.
            This method is currently empty and can be filled with initial setup logic if needed in the future.
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.Dispose">
            <summary>
            Releases all resources used by the StoreModule.
            This method is currently empty and can be filled with cleanup logic if needed in the future.
            </summary>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.BuyVirtualItemsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Asynchronously initiates a purchase transaction for a list of virtual items in the Ready Games Network (RGN) store.
            </summary>
            <param name="itemIds">A list of virtual item identifiers to be purchased.</param>
            <param name="currencies">An optional list of currency identifiers used for the transaction.
            Specify to use concrete currencies while purchasing, leave null to make choice automatically (may throws an Exception)
            The default is null.</param>
            <param name="offerId">An optional parameter representing an offer identifier associated with the purchase transaction.
            The default is an empty string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided itemIds list is null or empty.</exception>
            <returns>A Task representing the asynchronous purchase operation.
            The Result property of the Task returns a <see cref="T:RGN.Modules.Store.PurchaseResult"/> object,
            indicating the outcome of the purchase transaction, which includes the purchased items and updated currency balances.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.BuyStoreOfferAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously initiates a purchase transaction for a store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier for the offer to be purchased.</param>
            <param name="currencies">An optional list of currency identifiers used for the transaction. The default is null.
            Specify to use concrete currencies while purchasing, leave null to make choice automatically (may throws an Exception)
            The default is null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId is null or empty.</exception>
            <returns>A Task representing the asynchronous purchase operation.
            The Result property of the Task returns a <see cref="T:RGN.Modules.Store.PurchaseResult"/> object,
            indicating the outcome of the purchase transaction, which includes
            the purchased items from the offer and updated currency balances.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetLootBoxByIdsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously retrieves a list of lootBoxes from the Ready Games Network (RGN)
            </summary>
            <param name="ids">A list of lootBox identifiers used to filter the lootBoxes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided ids list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.LootBox"/> objects representing the lootBox that match the specified identifiers.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetLootBoxesByAppIdAsync(System.String,System.Int32,System.String)">
            <summary>
            Asynchronously retrieves a list of lootBoxes from the Ready Games Network (RGN) store based on
            the provided application identifiers.
            </summary>
            <param name="appId">Application identifier used to filter the lootBoxes.</param>
            <param name="limit">An integer indicating the maximum number of store offers to retrieve.</param>
            <param name="startAfter">An optional parameter representing an store offer id after which to
            start retrieving the store offers. The default is an empty string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided appId list is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.LootBox"/> objects representing the lootBoxes that match the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetLootBoxesForCurrentAppAsync(System.Int32,System.String)">
            <summary>
            Asynchronously retrieves a list of lootBoxes for the current application from the Ready Games Network (RGN) store.
            </summary>
            <param name="limit">An integer indicating the maximum number of lootBoxes to retrieve.</param>
            <param name="startAfter">An optional parameter representing an lootBox id after which to
            start retrieving the lootBoxes. The default is an empty string.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list
            of <see cref="T:RGN.Modules.Store.LootBox"/> objects representing the lootBoxes that match the current application identifier,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.LootboxIsAvailableAsync(System.String)">
            <summary>
            Asynchronously checks if a lootbox associated with the specified name is
            available in the Ready Games Network (RGN) store.
            The name specifies the virtual items that are included into the lootbox.
            </summary>
            <param name="name">The unique identifier name associated with the lootbox to be checked.
            Specifies the virtual items that are included into the lootbox.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided name is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task indicates whether
            the lootbox is available (returns true) or not (returns false).</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetAvailableLootBoxItemsCountAsync(System.String)">
            <summary>
            Asynchronously gets the number of virtual items available for a lootbox
            The name specifies the virtual items that are included into the lootbox.
            </summary>
            <param name="name">The unique identifier name associated with the lootbox to be checked.
            Specifies the virtual items that are included into the lootbox.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided name is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns
            the amount of virtual items available in the loot box</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.OpenLootboxAsync(System.String)">
            <summary>
            Asynchronously opens a lootbox associated with the specified name in the Ready Games Network (RGN) store.
            The name specifies the virtual items that are included into the lootbox.
            Randomly selects a virtual item to purchase. Goes with the selected virtual item through purchase process
            <see cref="M:RGN.Modules.Store.StoreModule.BuyVirtualItemsAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)"/>
            if the virtual item does not have price specified, it is added to users inventory for free
            </summary>
            <param name="name">The unique identifier name associated with the lootbox to be opened.
            Specifies the virtual items that are included into the lootbox.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided name is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns the
            <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> object representing the items obtained from the opened lootbox.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.AddVirtualItemsStoreOfferAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.String[],System.Int32)">
            <summary>
            Asynchronously adds a new store offer for virtual items to the Ready Games Network (RGN) store.
            </summary>
            <param name="appIds">A list of application identifiers which this store offer is associated with.</param>
            <param name="itemIds">A list of identifiers for the virtual items included in this offer.</param>
            <param name="name">An optional parameter representing the name of the store offer.
            The default is an empty string.</param>
            <param name="description">An optional parameter representing the description of the store offer.
            The default is an empty string.</param>
            <param name="tags">An optional array of tags associated with the store offer.
            The default is null.</param>
            <param name="quantity">An optional parameter representing the quantity of the items included in the store offer.
            The default is 1.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided appIds or itemIds list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns the
            <see cref="T:RGN.Modules.Store.StoreOffer"/> object representing the newly created store offer.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.ImportStoreOffersFromCSVAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously imports a list of store offers from a CSV formatted string to the Ready Games Network (RGN) store.
            </summary>
            <param name="content">A string representing the CSV content that contains the store offers to be imported.</param>
            <param name="delimiter">A string representing the character used as a delimiter in the CSV content.</param>
            <param name="cancellationToken">An optional parameter for the CancellationToken that propagates a notification
            that operations should be cancelled. The default value is None.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided content string is null or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation has been cancelled via the provided CancellationToken.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns
            a list of <see cref="T:RGN.Modules.Store.StoreOffer"/> objects representing the successfully imported store offers.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetByTagsAsync(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves a list of store offers from the Ready Games Network (RGN) store based on the provided tags.
            </summary>
            <param name="tags">A list of tags used to filter the store offers.</param>
            <param name="appId">An optional parameter representing the application identifier for further filtering of the store offers.
            The default is an empty string.</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp
            in the store offers retrieval process. The default is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided tags list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.StoreOffer"/> objects representing the store offers that match the specified tags and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetByTimestampAsync(System.String,System.DateTime)">
            <summary>
            Asynchronously retrieves a list of store offers from the Ready Games Network (RGN) store based on a provided timestamp.
            </summary>
            <param name="appId">The application identifier used for filtering the store offers.</param>
            <param name="timestamp">A DateTime object representing the timestamp for filtering the store offers.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided appId string is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list
            of <see cref="T:RGN.Modules.Store.StoreOffer"/> objects representing the store offers that match the specified appId and timestamp.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves a list of store offers from the Ready Games Network (RGN) store based on
            the provided application identifiers.
            </summary>
            <param name="appIds">A list of application identifiers used to filter the store offers.</param>
            <param name="limit">An integer indicating the maximum number of store offers to retrieve.</param>
            <param name="startAfter">An optional parameter representing an store offer id after which to
            start retrieving the store offers. The default is an empty string.</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the store
            offers retrieval process. The default is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided appIds list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.StoreOffer"/> objects representing the store offers that match the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetForCurrentAppAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves a list of store offers for the current application from the Ready Games Network (RGN) store.
            </summary>
            <param name="limit">An integer indicating the maximum number of store offers to retrieve.</param>
            <param name="startAfter">An optional parameter representing an store offer id after which to
            start retrieving the store offers. The default is an empty string.</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the store offers
            retrieval process. The default is false.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list
            of <see cref="T:RGN.Modules.Store.StoreOffer"/> objects representing the store offers that match the current application identifier,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetWithVirtualItemsDataForCurrentAppAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves a list of store offers with their associated virtual items data for the current application
            from the Ready Games Network (RGN) store.
            </summary>
            <param name="limit">An integer indicating the maximum number of store offers to retrieve.</param>
            <param name="startAfter">An optional parameter representing an stor offer id after which to start retrieving the store offers.
            The default is an empty string.</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the store
            offers retrieval process. The default is false.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.StoreOffer"/> objects with their associated store offer items data that match the current application identifier,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetWithVirtualItemsDataByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves a list of store offers along with their associated virtual items data from
            the Ready Games Network (RGN) store based on the provided application identifiers.
            </summary>
            <param name="appIds">A list of application identifiers used to filter the store offers.</param>
            <param name="limit">An integer indicating the maximum number of store offers to retrieve.</param>
            <param name="startAfter">An optional parameter representing an store offer id after which to start retrieving the store offers.
            The default is an empty string.</param>
            <param name="ignoreTimestamp">An optional parameter that indicates whether to ignore the timestamp in the store
            offers retrieval process. The default is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided appIds list is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the provided limit value is zero.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.StoreOffer"/> objects along with their associated virtual items data, matching the specified application identifiers,
            limit and other optional parameters.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetByIdsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously retrieves a list of store offers from the Ready Games Network (RGN)
            store based on the provided store offer identifiers.
            </summary>
            <param name="ids">A list of store offer identifiers used to filter the store offers.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided ids list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Store.StoreOffer"/> objects representing the store offers that match the specified identifiers.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetTagsAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of tags associated with a specific store offer from the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to retrieve tags.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of tags
            associated with the specified store offer.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetTagsAsync(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Asynchronously sets a list of tags for a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to set tags.</param>
            <param name="tags">A list of tags to be set for the specified store offer.</param>
            <param name="appId">Optional parameter that you can use to retrieve items only for your app
            When you set the tags for Virtual Item, you can use the appId optional parameter
            The app id is attached to every name and stored in the tags array
            For example:
            tags without appId could look like: "weapons", "rifles"
            tags with appId could look like: "weapons_your.app.id", "rifles_your.app.id"
            The default is an empty string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId is null or empty or when the
            provided tags list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetNameAsync(System.String,System.String)">
            <summary>
            Asynchronously sets the name for a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to set the name.</param>
            <param name="name">The new name to be set for the specified store offer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId or name is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetDescriptionAsync(System.String,System.String)">
            <summary>
            Asynchronously sets the description for a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to set the description.</param>
            <param name="description">The new description to be set for the specified store offer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId or description is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetPricesAsync(System.String,System.Collections.Generic.List{RGN.Modules.VirtualItems.PriceInfo})">
            <summary>
            Asynchronously sets the prices for a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to set the prices.</param>
            <param name="prices">A list of PriceInfo objects to be set for the specified store offer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId is null or empty or
            when the provided prices list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetTimeAsync(System.String,RGN.Modules.Store.TimeInfo)">
            <summary>
            Asynchronously sets the time information for a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to set the time information.</param>
            <param name="time">A TimeInfo object containing the time information to be set for the specified store offer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId is null or empty or when the
            provided TimeInfo object is null.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetImageUrlAsync(System.String,System.String)">
            <summary>
            Asynchronously sets the image URL for a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="offerId">The identifier of the store offer for which to set the image URL.</param>
            <param name="imageUrl">The URL of the image to be set for the specified store offer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided offerId or imageUrl is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The task result does not return a value.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.GetPropertiesAsync(System.String)">
            <summary>
            Asynchronously retrieves the properties of a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="storeOfferId">The identifier of the store offer whose properties are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided storeOfferId is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Task result contains a string that represents the JSON-formatted properties of the store offer.</returns>
        </member>
        <member name="M:RGN.Modules.Store.StoreModule.SetPropertiesAsync(System.String,System.String)">
            <summary>
            Asynchronously sets the properties of a specific store offer in the Ready Games Network (RGN) store.
            </summary>
            <param name="storeOfferId">The identifier of the store offer whose properties are to be set.</param>
            <param name="json">A string containing the JSON representation of the properties to be set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided storeOfferId or json is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Task result contains a string confirmation of the properties' update.</returns>
        </member>
    </members>
</doc>
